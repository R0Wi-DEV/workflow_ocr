<?php

declare(strict_types=1);

/**
 * @copyright Copyright (c) 2025 Robin Windey <ro.windey@gmail.com>
 *
 *  @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OCA\WorkflowOcr\OcrProcessors\Remote\Client\Model;

use ArrayAccess;
use OCA\WorkflowOcr\OcrProcessors\Remote\Client\ObjectSerializer;

/**
 * OcrResult Class Doc Comment
 *
 * @category Class
 * @package  OCA\WorkflowOcr\OcrProcessors\Remote\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OcrResult implements ModelInterface, ArrayAccess, \JsonSerializable {
	public const DISCRIMINATOR = null;

	/**
	 * The original name of the model.
	 *
	 * @var string
	 */
	protected static $openAPIModelName = 'OcrResult';

	/**
	 * Array of property to type mappings. Used for (de)serialization
	 *
	 * @var string[]
	 */
	protected static $openAPITypes = [
		'filename' => 'string',
		'contentType' => 'string',
		'recognizedText' => 'string',
		'fileContent' => 'string'
	];

	/**
	 * Array of property to format mappings. Used for (de)serialization
	 *
	 * @var string[]
	 * @phpstan-var array<string, string|null>
	 * @psalm-var array<string, string|null>
	 */
	protected static $openAPIFormats = [
		'filename' => null,
		'contentType' => null,
		'recognizedText' => null,
		'fileContent' => null
	];

	/**
	 * Array of nullable properties. Used for (de)serialization
	 *
	 * @var boolean[]
	 */
	protected static array $openAPINullables = [
		'filename' => false,
		'contentType' => false,
		'recognizedText' => false,
		'fileContent' => false
	];

	/**
	 * If a nullable field gets set to null, insert it here
	 *
	 * @var boolean[]
	 */
	protected array $openAPINullablesSetToNull = [];

	/**
	 * Array of property to type mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function openAPITypes() {
		return self::$openAPITypes;
	}

	/**
	 * Array of property to format mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function openAPIFormats() {
		return self::$openAPIFormats;
	}

	/**
	 * Array of nullable properties
	 *
	 * @return array
	 */
	protected static function openAPINullables(): array {
		return self::$openAPINullables;
	}

	/**
	 * Array of nullable field names deliberately set to null
	 *
	 * @return boolean[]
	 */
	private function getOpenAPINullablesSetToNull(): array {
		return $this->openAPINullablesSetToNull;
	}

	/**
	 * Setter - Array of nullable field names deliberately set to null
	 *
	 * @param boolean[] $openAPINullablesSetToNull
	 */
	private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void {
		$this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
	}

	/**
	 * Checks if a property is nullable
	 *
	 * @param string $property
	 * @return bool
	 */
	public static function isNullable(string $property): bool {
		return self::openAPINullables()[$property] ?? false;
	}

	/**
	 * Checks if a nullable property is set to null.
	 *
	 * @param string $property
	 * @return bool
	 */
	public function isNullableSetToNull(string $property): bool {
		return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
	}

	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @var string[]
	 */
	protected static $attributeMap = [
		'filename' => 'filename',
		'contentType' => 'contentType',
		'recognizedText' => 'recognizedText',
		'fileContent' => 'fileContent'
	];

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @var string[]
	 */
	protected static $setters = [
		'filename' => 'setFilename',
		'contentType' => 'setContentType',
		'recognizedText' => 'setRecognizedText',
		'fileContent' => 'setFileContent'
	];

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @var string[]
	 */
	protected static $getters = [
		'filename' => 'getFilename',
		'contentType' => 'getContentType',
		'recognizedText' => 'getRecognizedText',
		'fileContent' => 'getFileContent'
	];

	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @return array
	 */
	public static function attributeMap() {
		return self::$attributeMap;
	}

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @return array
	 */
	public static function setters() {
		return self::$setters;
	}

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @return array
	 */
	public static function getters() {
		return self::$getters;
	}

	/**
	 * The original name of the model.
	 *
	 * @return string
	 */
	public function getModelName() {
		return self::$openAPIModelName;
	}


	/**
	 * Associative array for storing property values
	 *
	 * @var mixed[]
	 */
	protected $container = [];

	/**
	 * Constructor
	 *
	 * @param mixed[] $data Associated array of property values
	 *                      initializing the model
	 */
	public function __construct(?array $data = null) {
		$this->setIfExists('filename', $data ?? [], null);
		$this->setIfExists('contentType', $data ?? [], null);
		$this->setIfExists('recognizedText', $data ?? [], null);
		$this->setIfExists('fileContent', $data ?? [], null);
	}

	/**
	 * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
	 * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
	 * $this->openAPINullablesSetToNull array
	 *
	 * @param string $variableName
	 * @param array $fields
	 * @param mixed $defaultValue
	 */
	private function setIfExists(string $variableName, array $fields, $defaultValue): void {
		if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
			$this->openAPINullablesSetToNull[] = $variableName;
		}

		$this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
	}

	/**
	 * Show all the invalid properties with reasons.
	 *
	 * @return array invalid properties with reasons
	 */
	public function listInvalidProperties() {
		$invalidProperties = [];

		if ($this->container['filename'] === null) {
			$invalidProperties[] = "'filename' can't be null";
		}
		if ($this->container['contentType'] === null) {
			$invalidProperties[] = "'contentType' can't be null";
		}
		if ($this->container['recognizedText'] === null) {
			$invalidProperties[] = "'recognizedText' can't be null";
		}
		if ($this->container['fileContent'] === null) {
			$invalidProperties[] = "'fileContent' can't be null";
		}
		return $invalidProperties;
	}

	/**
	 * Validate all the properties in the model
	 * return true if all passed
	 *
	 * @return bool True if all properties are valid
	 */
	public function valid() {
		return count($this->listInvalidProperties()) === 0;
	}


	/**
	 * Gets filename
	 *
	 * @return string
	 */
	public function getFilename() {
		return $this->container['filename'];
	}

	/**
	 * Sets filename
	 *
	 * @param string $filename Name of the file
	 *
	 * @return self
	 */
	public function setFilename($filename) {
		if (is_null($filename)) {
			throw new \InvalidArgumentException('non-nullable filename cannot be null');
		}
		$this->container['filename'] = $filename;

		return $this;
	}

	/**
	 * Gets contentType
	 *
	 * @return string
	 */
	public function getContentType() {
		return $this->container['contentType'];
	}

	/**
	 * Sets contentType
	 *
	 * @param string $contentType Content type of the file. For example: application/pdf
	 *
	 * @return self
	 */
	public function setContentType($contentType) {
		if (is_null($contentType)) {
			throw new \InvalidArgumentException('non-nullable contentType cannot be null');
		}
		$this->container['contentType'] = $contentType;

		return $this;
	}

	/**
	 * Gets recognizedText
	 *
	 * @return string
	 */
	public function getRecognizedText() {
		return $this->container['recognizedText'];
	}

	/**
	 * Sets recognizedText
	 *
	 * @param string $recognizedText Recognized text from the file
	 *
	 * @return self
	 */
	public function setRecognizedText($recognizedText) {
		if (is_null($recognizedText)) {
			throw new \InvalidArgumentException('non-nullable recognizedText cannot be null');
		}
		$this->container['recognizedText'] = $recognizedText;

		return $this;
	}

	/**
	 * Gets fileContent
	 *
	 * @return string
	 */
	public function getFileContent() {
		return $this->container['fileContent'];
	}

	/**
	 * Sets fileContent
	 *
	 * @param string $fileContent Base64 encoded file content
	 *
	 * @return self
	 */
	public function setFileContent($fileContent) {
		if (is_null($fileContent)) {
			throw new \InvalidArgumentException('non-nullable fileContent cannot be null');
		}
		$this->container['fileContent'] = $fileContent;

		return $this;
	}
	/**
	 * Returns true if offset exists. False otherwise.
	 *
	 * @param integer $offset Offset
	 *
	 * @return boolean
	 */
	public function offsetExists($offset): bool {
		return isset($this->container[$offset]);
	}

	/**
	 * Gets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return mixed|null
	 */
	#[\ReturnTypeWillChange]
	public function offsetGet($offset): mixed {
		return $this->container[$offset] ?? null;
	}

	/**
	 * Sets value based on offset.
	 *
	 * @param int|null $offset Offset
	 * @param mixed $value Value to be set
	 *
	 * @return void
	 */
	public function offsetSet($offset, $value): void {
		if (is_null($offset)) {
			$this->container[] = $value;
		} else {
			$this->container[$offset] = $value;
		}
	}

	/**
	 * Unsets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return void
	 */
	public function offsetUnset($offset): void {
		unset($this->container[$offset]);
	}

	/**
	 * Serializes the object to a value that can be serialized natively by json_encode().
	 * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
	 *
	 * @return mixed Returns data which can be serialized by json_encode(), which is a value
	 *               of any type other than a resource.
	 */
	#[\ReturnTypeWillChange]
	public function jsonSerialize(): mixed {
		return ObjectSerializer::sanitizeForSerialization($this);
	}

	/**
	 * Gets the string presentation of the object
	 *
	 * @return string
	 */
	public function __toString() {
		return json_encode(
			ObjectSerializer::sanitizeForSerialization($this),
			JSON_PRETTY_PRINT
		);
	}

	/**
	 * Gets a header-safe presentation of the object
	 *
	 * @return string
	 */
	public function toHeaderValue() {
		return json_encode(ObjectSerializer::sanitizeForSerialization($this));
	}
}
