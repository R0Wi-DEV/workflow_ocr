<?php

/**
 * ModelInterface
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OCA\WorkflowOcr\OcrProcessors\Remote\Client\Model
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @copyright Copyright (c) 2025 Robin Windey <ro.windey@gmail.com>
 *
 *  @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OCA\WorkflowOcr\OcrProcessors\Remote\Client\Model;

/**
 * Interface abstracting model access.
 *
 * @package OCA\WorkflowOcr\OcrProcessors\Remote\Client\Model
 * @author  OpenAPI Generator team
 */
interface ModelInterface {
	/**
	 * The original name of the model.
	 *
	 * @return string
	 */
	public function getModelName();

	/**
	 * Array of property to type mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function openAPITypes();

	/**
	 * Array of property to format mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function openAPIFormats();

	/**
	 * Array of attributes where the key is the local name, and the value is the original name
	 *
	 * @return array
	 */
	public static function attributeMap();

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @return array
	 */
	public static function setters();

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @return array
	 */
	public static function getters();

	/**
	 * Show all the invalid properties with reasons.
	 *
	 * @return array
	 */
	public function listInvalidProperties();

	/**
	 * Validate all the properties in the model
	 * return true if all passed
	 *
	 * @return bool
	 */
	public function valid();

	/**
	 * Checks if a property is nullable
	 *
	 * @param string $property
	 * @return bool
	 */
	public static function isNullable(string $property): bool;

	/**
	 * Checks if a nullable property is set to null.
	 *
	 * @param string $property
	 * @return bool
	 */
	public function isNullableSetToNull(string $property): bool;
}
